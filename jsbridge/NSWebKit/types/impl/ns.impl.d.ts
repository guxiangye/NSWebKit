declare const ns: {
    version: string;
    setEnableDebug(enableDebug: boolean): void;
    openAppAuthorizeSetting(): Promise<import("..").GenericAsyncResult<undefined>>;
    getAppInfoSync(): import("..").ReturnAppInfo;
    setBadgeCount(param: import("..").ParamBadgeCount): Promise<import("..").GenericAsyncResult<undefined>>;
    navigateTo(param: import("..").ParamNavigateTo): Promise<import("..").GenericAsyncResult<undefined>>;
    navigateBack(): Promise<import("..").GenericAsyncResult<undefined>>;
    openExternalBrowser(param: import("..").ParamExternalBrowse): Promise<import("..").GenericAsyncResult<undefined>>;
    setNavigationBarTheme(param: import("..").ParamNavigationBarTheme): Promise<import("..").GenericAsyncResult<undefined>>;
    getDeviceInfoSync(): import("..").ReturnDeviceInfo;
    getClipboardDataSync(): import("..").ClipboardData;
    setClipboardData(param: import("..").ClipboardData): Promise<import("..").GenericAsyncResult<undefined>>;
    makePhoneCall(param: import("..").ParamPhoneCall): Promise<import("..").GenericAsyncResult<undefined>>;
    getNetworkTypeSync(): import("..").ReturnNetworkType;
    getNotificationSwitchStatus(): Promise<import("..").GenericAsyncResult<import("..").ReturnNotiSwitchStatus>>;
    getVoiceBroadcastSwitchStatus(): Promise<import("..").GenericAsyncResult<import("..").ReturnVoiceBroadcastSwitchStatus>>;
    setVoiceBroadcastSwitchStatus(param: import("..").ParamVoiceBroadcastSwitchStatus): Promise<import("..").GenericAsyncResult<import("..").ReturnVoiceBroadcastSwitchStatus>>;
    cleanWebviewCache(): Promise<import("..").GenericAsyncResult<undefined>>;
    registerHandler(handlerName: string, handler: import("..").GenericCallbackFunc<any>): void;
    unRegisterHandlers(handlerName: string): void;
    unRegisterHandler(handlerName: string, handler: import("..").GenericCallbackFunc<any>): void;
    checkHandlerExist(handlerName: string): boolean;
    onNetworkStatusChange(handler: import("..").GenericCallbackFunc<import("..").CallbackNetworkStatusChange>): void;
    offNetworkStatusChange(handler: import("..").GenericCallbackFunc<import("..").CallbackNetworkStatusChange>): void;
    onAppShow(handler: import("..").GenericCallbackFunc<void>): void;
    offAppShow(handler: import("..").GenericCallbackFunc<void>): void;
    onAppHide(handler: import("..").GenericCallbackFunc<void>): void;
    offAppHide(handler: import("..").GenericCallbackFunc<void>): void;
    onRemoteNotificationReceive(handler: import("..").GenericCallbackFunc<void>): void;
    offRemoteNotificationReceive(handler: import("..").GenericCallbackFunc<void>): void;
    onPageShow(handler: import("..").GenericCallbackFunc<void>): void;
    offPageShow(handler: import("..").GenericCallbackFunc<void>): void;
    onPageHide(handler: import("..").GenericCallbackFunc<void>): void;
    offPageHide(handler: import("..").GenericCallbackFunc<void>): void;
    compressImage(param: import("..").ParamCompressImage): Promise<import("..").GenericAsyncResult<import("..").ReturnCompressImageResult>>;
    saveImageToPhotosAlbum(param: import("..").ParamImageToPhotosAlbum): Promise<import("..").GenericAsyncResult<undefined>>;
    chooseImage(param: import("..").ParamChooseImage): Promise<import("..").GenericAsyncResult<import("..").ReturnChooseImageResult>>;
    scanCode(param: import("..").ParamScanCode): Promise<import("..").GenericAsyncResult<import("..").ReturnScanCode>>;
    getLocationInfo(): Promise<import("..").GenericAsyncResult<import("..").ReturnLocationInfo>>;
    chooseLocation(param: import("..").ParamChooseLocation): Promise<import("..").GenericAsyncResult<import("..").ReturnChooseLocationInfo>>;
    sendWXAuthRequest(): Promise<import("..").GenericAsyncResult<import("..").ReturnWXAuthResult>>;
    shareToWX(param: import("..").ParamShareToWX): Promise<import("..").GenericAsyncResult<undefined>>;
    launchWXMiniProgram(param: import("..").ParamOpenWXMiniProgram): Promise<import("..").GenericAsyncResult<import("..").ReturnOpenWXMiniProgramResult>>;
    shareToWXMiniProgram(param: import("..").ParamShareToWXMiniProgram): Promise<import("..").GenericAsyncResult<undefined>>;
    handleMessageFromNative(messageJSON: string): void;
    noticeUserLogin(messageJSON: string): void;
    noticeUserLogout(): void;
    noticePageShow(): void;
    noticePageHide(): void;
    toast(param: {
        msg: string;
    }): Promise<any>;
};
export default ns;
